#Поиск графа в ширину
"""Функция создания нового графа пользователем
   Входные параметры: graph-список смежности"""
def new_graph(graph):
    print('Введите количество вершин графа')
    n = int(input()) #количество вершин
    for i in range(n):
        print('Введите количество ребер', i,'вершины')
        r = int(input()) #количество ребер вершины
        print('Введите ребра')
        graph += [[int(input()) for j in range(r)]]
    return graph

"""Функция поиска в ширину, проверяет и отмечает посещенность вершин
   Входные параметры: v-начальная вершина"""
def bfs(v):
    global lvl
    lvl[v] = 0   #отметка вершины как пройденной
    stack = [v]  #список прохода вершин по очереди
    while stack:
        dv = stack.pop(0)   #запоминание значения дочерней вершины
        for w in graph[dv]:  #проверка на пройденность вершины
            if lvl[w] is -1:
                stack.append(w)  #добавление вершины в конец очереди
                lvl[w] = lvl[dv] + 1 #отметка вершины как пройденной и повышение её уровня

graph=[]
new_graph(graph)
lvl = [-1] * len(graph)  #список уровней вершин, изначально все -1 == не пройдены
for i in range(len(graph)):   #проход по всем ребрам каждой вершины
    if lvl[i] is -1:
        bfs(i)
print('Введите номер вершины, уровень которой хотите знать, счёт с 0')
n = int(input())
print(lvl[n])
